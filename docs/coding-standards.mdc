---
description: プロジェクトのコーディング規約とベストプラクティス
globs: 
alwaysApply: false
---
# コーディング規約

## 概要

このプロジェクトにおけるコーディング規約を定義します。一貫性のある高品質なコードを維持し、チーム全体の開発効率を向上させることを目的とします。

## 基本原則

### 1. 可読性の重視
- コードは書くよりも読まれることが多い
- 明確で理解しやすいコードを書く
- 適切な命名と構造化を心がける

### 2. 一貫性の保持
- プロジェクト全体で統一されたスタイルを維持
- 既存のコードパターンに従う
- ツールによる自動化を活用

### 3. 保守性の向上
- 変更に強いコード設計
- 適切な分離と抽象化
- テスタブルなコード構造

## TypeScript 規約

### 型安全性

#### ❌ any型の使用禁止
```typescript
// ❌ 禁止
function processData(data: any) {
  return data.someProperty;
}

const user: any = getUser();

// ✅ 推奨
interface User {
  id: string;
  name: string;
  email: string;
}

function processData(data: User) {
  return data.name;
}

const user: User = getUser();
```

**any型が絶対に禁止される理由:**
- TypeScriptの型チェック機能を無効化
- ランタイムエラーの原因となる
- IDEの自動補完・リファクタリング機能が働かない
- コードの可読性・保守性が著しく低下

#### 型定義のベストプラクティス

```typescript
// ✅ 明確な型定義
interface ApiResponse<T> {
  data: T;
  status: 'success' | 'error';
  message?: string;
}

// ✅ Union型の活用
type ButtonVariant = 'primary' | 'secondary' | 'danger';

// ✅ Generic型の活用
function createApiCall<T>(endpoint: string): Promise<ApiResponse<T>> {
  // 実装
}

// ✅ 型ガードの使用
function isUser(obj: unknown): obj is User {
  return (
    typeof obj === 'object' &&
    obj !== null &&
    typeof (obj as User).id === 'string'
  );
}
```

#### unknown型の活用
```typescript
// ✅ anyの代わりにunknownを使用
function parseJson(json: string): unknown {
  return JSON.parse(json);
}

// ✅ 型ガードと組み合わせて安全に使用
const data = parseJson(jsonString);
if (isUser(data)) {
  console.log(data.name); // 型安全
}
```

### 厳格な型チェック設定

`tsconfig.json`で以下の設定を必須とする：

```json
{
  "compilerOptions": {
    "strict": true,
    "noImplicitAny": true,
    "noImplicitReturns": true,
    "noImplicitThis": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true
  }
}
```

## React / Next.js 規約

> **詳細なコンポーネント設計ガイドラインは [component-design.mdc](./component-design.mdc) を参照してください。**

### 基本的な型安全性
```typescript
// ✅ 明確なProps型定義（any型禁止）
interface ComponentProps {
  data: UserData; // 具体的な型を指定
  onAction: (id: string) => void; // 関数型も明確に
}

// ❌ any型の使用禁止
interface BadProps {
  data: any; // 絶対禁止
  callback: any; // 絶対禁止
}
```

## 命名規約

### ファイル・ディレクトリ命名

> **詳細なファイル構造・命名規約は [component-design.mdc](./component-design.mdc) を参照してください。**

#### 基本的な命名原則
- **Reactコンポーネント**: PascalCase（例: `UserProfile.tsx`）
- **ユーティリティファイル**: camelCase（例: `authConfig.ts`）
- **Next.jsファイル**: lowercase（例: `page.tsx`, `layout.tsx`）

### 変数・関数命名

#### 変数名
```typescript
// ✅ camelCase
const userName = 'john';
const isLoggedIn = true;
const userList = [];

// ✅ boolean値は is/has/can などで開始
const isVisible = true;
const hasPermission = false;
const canEdit = true;

// ✅ 定数はSCREAMING_SNAKE_CASE
const API_ENDPOINT = 'https://api.example.com';
const MAX_RETRY_COUNT = 3;
```

#### 関数名
```typescript
// ✅ 動詞で開始
function getUserById(id: string): User | null { }
function validateEmail(email: string): boolean { }
function handleSubmit(): void { }

// ✅ イベントハンドラーは "handle" または "on" で開始
function handleClick(): void { }
function onUserSelect(user: User): void { }

// ✅ 戻り値がbooleanの場合は is/has/can で開始
function isValidUser(user: User): boolean { }
function hasPermission(user: User, action: string): boolean { }
```

#### インターフェース・型名
```typescript
// ✅ PascalCase
interface User {
  id: string;
  name: string;
}

// ✅ Props は "Props" サフィックス
interface UserCardProps {
  user: User;
  onEdit?: () => void;
}

// ✅ 型は Type サフィックス（必要に応じて）
type ApiResponseType<T> = {
  data: T;
  status: string;
};

// ✅ Union型は具体的な名前
type ButtonVariant = 'primary' | 'secondary' | 'danger';
type HttpMethod = 'GET' | 'POST' | 'PUT' | 'DELETE';
```

## コード構造・パターン

### インポート順序
```typescript
// 1. Node.js標準ライブラリ
import { readFile } from 'fs/promises';

// 2. 外部ライブラリ
import React from 'react';
import { NextRequest } from 'next/server';

// 3. 内部ライブラリ（@/から始まる）
import { Button } from '@/components/ui/button';
import { auth } from '@/lib/auth';

// 4. 相対インポート
import './styles.css';
import { localUtil } from '../utils';
```

### エクスポート規約
```typescript
// ✅ 名前付きエクスポート（推奨）
export function Button() { }
export { Button };

// ✅ デフォルトエクスポート（Pageコンポーネントのみ）
export default function HomePage() { }

// ❌ 混在は避ける
export function Button() { }
export default Button; // 避ける
```

### 条件分岐・ループ

#### 早期リターン
```typescript
// ✅ 早期リターンパターン
function processUser(user: User | null): string {
  if (!user) {
    return 'User not found';
  }
  
  if (!user.isActive) {
    return 'User is inactive';
  }
  
  return `Welcome, ${user.name}!`;
}

// ❌ ネストの深い条件分岐
function processUser(user: User | null): string {
  if (user) {
    if (user.isActive) {
      return `Welcome, ${user.name}!`;
    } else {
      return 'User is inactive';
    }
  } else {
    return 'User not found';
  }
}
```

#### Optional Chaining の活用
```typescript
// ✅ Optional Chaining
const userName = user?.profile?.name ?? 'Anonymous';
const hasAdminRole = user?.roles?.includes('admin') ?? false;

// ✅ Nullish Coalescing
const config = userConfig ?? defaultConfig;
const port = process.env.PORT ?? 3000;
```

## スタイリング規約（Panda CSS）

### スタイル定義
```typescript
// ✅ Panda CSS レシピの使用
import { button } from 'styled-system/recipes';

export function Button({ variant, size, children }: ButtonProps) {
  return (
    <button className={button({ variant, size })}>
      {children}
    </button>
  );
}

// ✅ css関数の使用
import { css } from 'styled-system/css';

const customStyles = css({
  padding: '1rem',
  backgroundColor: 'blue.500',
  _hover: {
    backgroundColor: 'blue.600'
  }
});
```

### クラス名の結合
```typescript
// ✅ cn（className）ユーティリティの使用
import { cn } from '@/lib/utils';

export function Card({ className, children }: CardProps) {
  return (
    <div className={cn('border rounded-lg p-4', className)}>
      {children}
    </div>
  );
}
```

## エラーハンドリング

### エラー型の定義
```typescript
// ✅ カスタムエラークラス
class ApiError extends Error {
  constructor(
    message: string,
    public statusCode: number,
    public code: string
  ) {
    super(message);
    this.name = 'ApiError';
  }
}

// ✅ Result型パターン
type Result<T, E = Error> = 
  | { success: true; data: T }
  | { success: false; error: E };

function safeApiCall<T>(fn: () => Promise<T>): Promise<Result<T>> {
  return fn()
    .then(data => ({ success: true as const, data }))
    .catch(error => ({ success: false as const, error }));
}
```

### エラーハンドリングパターン
```typescript
// ✅ try-catch の適切な使用
async function fetchUser(id: string): Promise<User | null> {
  try {
    const response = await api.get(`/users/${id}`);
    return response.data;
  } catch (error) {
    if (error instanceof ApiError && error.statusCode === 404) {
      return null;
    }
    throw error; // 予期しないエラーは再スロー
  }
}

// ✅ Error Boundary での エラーキャッチ
export function ErrorBoundary({ children }: { children: React.ReactNode }) {
  return (
    <ErrorBoundaryComponent
      fallback={<ErrorFallback />}
      onError={(error, errorInfo) => {
        console.error('Error caught by boundary:', error, errorInfo);
      }}
    >
      {children}
    </ErrorBoundaryComponent>
  );
}
```

## パフォーマンス規約

> **詳細なパフォーマンス最適化は [component-design.mdc](./component-design.mdc) を参照してください。**

### 基本原則
- 不要な再レンダリングを避ける
- 重い処理は適切にメモ化する
- 大きなコンポーネントは遅延読み込みを検討

## テスト規約

> **包括的なテスト戦略とベストプラクティスは [testing.mdc](./testing.mdc) を参照してください。**

### テストでの型安全性
```typescript
// ✅ テストでもany型禁止
interface MockUser {
  id: string;
  name: string;
}

const mockUser: MockUser = { id: '1', name: 'Test User' };

// ❌ テストでもany型は使用禁止
const badMockData: any = { /* データ */ }; // 禁止
```

## コメント規約

### JSDoc の使用
```typescript
/**
 * ユーザー情報を取得する
 * @param id - ユーザーID
 * @returns ユーザー情報、見つからない場合はnull
 * @throws {ApiError} API呼び出しが失敗した場合
 */
async function getUserById(id: string): Promise<User | null> {
  // 実装
}
```

### インラインコメント
```typescript
// ✅ 「なぜ」を説明するコメント
// Safari では transform-origin が正しく動作しないため、明示的に設定
element.style.transformOrigin = 'center center';

// ✅ 複雑なビジネスロジックの説明
// 管理者は全てのデータにアクセス可能、
// 一般ユーザーは自分のデータのみアクセス可能
const hasAccess = user.role === 'admin' || user.id === resourceOwnerId;

// ❌ 「何を」するかのコメント（不要）
// ユーザー名を取得
const userName = user.name;
```

## 禁止事項

### 絶対に使用禁止

1. **any型の使用**
   ```typescript
   // ❌ 絶対禁止
   const data: any = response;
   function process(input: any): any { }
   ```

2. **eval()関数の使用**
   ```typescript
   // ❌ セキュリティリスクのため禁止
   eval(userInput);
   ```

3. **console.log の本番環境への残留**
   ```typescript
   // ❌ 本番環境では禁止（開発時は可）
   console.log('debug info');
   ```

4. **var キーワードの使用**
   ```typescript
   // ❌ letまたはconstを使用
   var userName = 'john';
   
   // ✅ 推奨
   const userName = 'john';
   let counter = 0;
   ```

5. **== 比較演算子の使用**
   ```typescript
   // ❌ 型強制が発生するため禁止
   if (value == null) { }
   
   // ✅ 厳密等価演算子を使用
   if (value === null) { }
   if (value == null) { } // nullとundefinedの両方をチェックする場合のみ例外
   ```

## ツール設定

### 必須ツール

1. **Biome**: linting と formatting
2. **TypeScript**: 型チェック
3. **Husky**: Git hooks
4. **lint-staged**: ステージングファイルのチェック

### VS Code 推奨設定

```json
{
  "editor.codeActionsOnSave": {
    "source.organizeImports": true,
    "source.fixAll": true
  },
  "editor.formatOnSave": true,
  "typescript.preferences.noSemicolons": false,
  "typescript.preferences.quoteStyle": "double"
}
```

## チェックリスト

新しいコードを書く際の確認事項：

### 基本的なコーディング規約
- [ ] **any型を使用していない**（最重要）
- [ ] 適切な型定義がされている
- [ ] 命名規約に従っている
- [ ] early return パターンを使用している
- [ ] エラーハンドリングが適切に実装されている
- [ ] 禁止事項に該当するコードがない

### 他ドキュメントのチェック項目
- [ ] コンポーネント設計: [component-design.mdc](./component-design.mdc) のガイドラインに準拠
- [ ] テスト実装: [testing.mdc](./testing.mdc) の戦略に従っている
- [ ] コードレビュー: [code-review.mdc](./code-review.mdc) のチェックポイントをクリア
- [ ] Git運用: [github-workflow.mdc](./github-workflow.mdc) のコミットルールに準拠

## 参考資料

### 関連ドキュメント
- [コンポーネント設計ガイドライン](./component-design.mdc)
- [テスト戦略とベストプラクティス](./testing.mdc)
- [コードレビューガイドライン](./code-review.mdc)
- [GitHubワークフローとブランチ戦略](./github-workflow.mdc)

### 外部リソース
- [TypeScript Handbook](https://www.typescriptlang.org/docs/)
- [Next.js Documentation](https://nextjs.org/docs)
- [Panda CSS Documentation](https://panda-css.com)
- [Biome Documentation](https://biomejs.dev)

---

この規約は定期的に見直し、プロジェクトの成長とともに更新していきます。