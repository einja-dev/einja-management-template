---
description: 
globs: 
alwaysApply: false
---
# コンポーネント設計ガイドライン

## 概要

このプロジェクトにおけるReactコンポーネントの設計原則と実装ガイドラインを定義します。

## 基本原則

### 1. 単一責任の原則
- 各コンポーネントは単一の機能・責任を持つ
- 複数の機能が必要な場合は、複数のコンポーネントに分割する

### 2. 再利用可能性
- プロジェクト全体で再利用可能なコンポーネントを作成する
- プロパティ（props）による柔軟なカスタマイズを可能にする

### 3. 型安全性
- TypeScriptの型定義を必須とする
- プロパティ、状態、イベントハンドラーは全て型定義する

### 4. Co-location（共存配置）
- 機能固有のコンポーネントは関連するページの近くに配置する
- `_components` ディレクトリを使用してページ固有のコンポーネントを管理する
- 複数のページで共有されるコンポーネントのみ `src/components/` に配置する

## ディレクトリ構造

```
src/
├── components/
│   ├── ui/                 # 基本的なUIコンポーネント
│   │   ├── Button/
│   │   ├── Input/
│   │   ├── Dialog/
│   │   └── ...
│   └── shared/             # 共通コンポーネント（レイアウト含む）
│       ├── Header/
│       ├── Footer/
│       ├── Sidebar/
│       ├── LoadingSpinner/
│       ├── ErrorBoundary/
│       └── ...
└── app/
    ├── dashboard/
    │   ├── page.tsx
    │   └── _components/    # ページ固有のコンポーネント (co-location)
    │       ├── DashboardChart/
    │       ├── StatsCard/
    │       └── ...
    ├── auth/
    │   ├── login/
    │   │   ├── page.tsx
    │   │   └── _components/
    │   │       ├── LoginForm/
    │   │       └── ...
    │   └── register/
    │       ├── page.tsx
    │       └── _components/
    │           ├── RegisterForm/
    │           └── ...
    └── ...
```

## コンポーネント命名規則

### ファイル名
- PascalCase を使用
- コンポーネント名とファイル名を一致させる
- 例: `Button.tsx`, `UserProfile.tsx`

**注意**: shadcn/uiで生成されたコンポーネントはkebab-caseファイル名（例: `button.tsx`, `input.tsx`）を使用しており、この命名規則の例外となります。shadcnコンポーネントはそのまま使用し、新規作成するカスタムコンポーネントのみPascalCaseを適用してください。

### ディレクトリ構造
```
ComponentName/
├── index.tsx           # コンポーネント本体
└── styles.ts          # Panda CSS スタイル定義（必要に応じて）
```

## 型定義

### Props インターフェース
```typescript
interface ButtonProps {
	children: React.ReactNode;
	variant?: "primary" | "secondary" | "danger";
	size?: "sm" | "md" | "lg";
	disabled?: boolean;
	onClick?: () => void;
}
```

### デフォルトProps
```typescript
const defaultProps: Partial<ButtonProps> = {
	variant: "primary",
	size: "md",
	disabled: false,
};
```

## スタイリング

### Panda CSS の使用
- Panda CSS を使用してスタイルを定義
- デザイントークンとレシピを活用
- 型安全なスタイル定義

```typescript
import { css } from "styled-system/css";
import { button } from "styled-system/recipes";

const buttonStyles = button({
	variant: "primary",
	size: "md",
});
```

### スタイルの分離
- スタイル定義は別ファイルまたは専用の関数に分離
- コンポーネント本体の可読性を向上

## 状態管理

### ローカル状態
- `useState` でローカル状態を管理
- 複雑な状態は `useReducer` を検討

## イベントハンドリング

### 命名規則
- `on` + 動詞の命名規則を使用
- 例: `onClick`, `onSubmit`, `onChange`

### 型定義
```typescript
interface FormProps {
	onSubmit: (data: FormData) => void;
	onChange: (field: string, value: string) => void;
}
```

## エラーハンドリング

### Error Boundary
- 予期しないエラーをキャッチ
- ユーザーフレンドリーなエラー表示

### バリデーション
- フォーム入力のバリデーション
- 適切なエラーメッセージの表示

## テスト

### 単体テスト
- Vitest を使用
- 各コンポーネントの単体テストを実装


### E2Eテスト
- Playwright を使用
- 実際のユーザー操作をテスト

## パフォーマンス

### メモ化
- `React.memo` で不要な再レンダリングを防止
- `useMemo`, `useCallback` で計算結果をキャッシュ

### 遅延読み込み
- `React.lazy` で大きなコンポーネントの遅延読み込み
- `Suspense` で読み込み状態を表示

## アクセシビリティ

### セマンティックHTML
- 適切なHTMLタグを使用
- `aria-*` 属性の適切な使用

### キーボード操作
- キーボードのみでの操作を可能にする
- フォーカス管理の実装

## 実装例

### 基本的なButtonコンポーネント

```typescript
// index.tsx
export interface ButtonProps {
	children: React.ReactNode;
	variant?: "primary" | "secondary" | "danger";
	size?: "sm" | "md" | "lg";
	disabled?: boolean;
	onClick?: () => void;
}

import { button } from "styled-system/recipes";
import type { ButtonProps } from "./types";

export const Button: React.FC<ButtonProps> = ({
	children,
	variant = "primary",
	size = "md",
	disabled = false,
	onClick,
}) => {
	return (
		<button
			className={button({ variant, size })}
			disabled={disabled}
			onClick={onClick}
		>
			{children}
		</button>
	);
};
```

## チェックリスト

新しいコンポーネントを作成する際の確認事項：

- [ ] 適切なディレクトリに配置されている
- [ ] TypeScript の型定義が完全
- [ ] Panda CSS でスタイリングされている
- [ ] プロパティのデフォルト値が設定されている
- [ ] アクセシビリティが考慮されている
- [ ] 単体テストが実装されている
- [ ] ドキュメントが更新されている

## 参考資料

- [React 公式ドキュメント](mdc:https:/react.dev)
- [TypeScript 公式ドキュメント](mdc:https:/www.typescriptlang.org)
- [Panda CSS ドキュメント](mdc:https:/panda-css.com)