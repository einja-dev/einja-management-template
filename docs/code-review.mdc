---
description: コードレビューガイドラインとベストプラクティス
globs: 
alwaysApply: false
---
# コードレビューガイドライン

## 概要

このプロジェクトにおけるコードレビューの指針、チェックポイント、ベストプラクティスを定義します。品質の高いコードを維持し、チーム全体の技術力向上を目指します。

## 基本方針

### 1. 建設的なレビュー
- 問題の指摘だけでなく、改善案も提示する
- 相手の学習を促進する視点でコメントする
- 感情的にならず、事実に基づいた客観的な指摘を行う

### 2. レビューの目的
- バグの早期発見と修正
- コードの可読性・保守性の向上
- チーム内の知識共有
- プロジェクト規約の遵守確認

### 3. レビューのタイミング
- プルリクエスト作成後、24時間以内にレビューを開始
- 緊急性の高い修正は即座にレビュー
- レビュー完了後、48時間以内にフィードバックに対応

## レビューチェックポイント

### 1. コード品質

#### 機能性
- [ ] 要件を満たしているか
- [ ] エッジケースが適切に処理されているか
- [ ] エラーハンドリングが実装されているか
- [ ] パフォーマンスに問題はないか

#### 可読性
- [ ] 変数名・関数名が分かりやすいか
- [ ] コードの構造が理解しやすいか
- [ ] 複雑なロジックにコメントがあるか
- [ ] 一貫したコーディングスタイルが保たれているか

#### 保守性
- [ ] 単一責任の原則が守られているか
- [ ] 適切にモジュール化されているか
- [ ] ハードコーディングされた値がないか
- [ ] 将来の拡張を考慮した設計か

### 2. TypeScript・型安全性

#### 型定義
- [ ] 適切な型定義がされているか
- [ ] `any`型の使用が最小限に抑えられているか
- [ ] interfaceやtypeが適切に定義されているか
- [ ] 型の再利用が考慮されているか

#### 型安全性
- [ ] 型エラーが発生していないか
- [ ] 型ガードが適切に使用されているか
- [ ] Optional chainやNullish coalescingが適切に使用されているか

### 3. React・Next.js

#### コンポーネント設計
- [ ] 単一責任の原則が守られているか
- [ ] Props の型定義が適切か
- [ ] useEffectの依存配列が正しいか
- [ ] 不要な再レンダリングが発生していないか

#### パフォーマンス
- [ ] React.memo、useMemo、useCallbackが適切に使用されているか
- [ ] 重い処理が適切に最適化されているか
- [ ] 画像やアセットの最適化がされているか

#### Next.js 固有
- [ ] App Routerの規約に従っているか
- [ ] メタデータが適切に設定されているか
- [ ] Server ComponentsとClient Componentsが適切に使い分けられているか

### 4. スタイリング（Panda CSS）

#### スタイル実装
- [ ] Panda CSSのレシピが適切に使用されているか
- [ ] デザイントークンが活用されているか
- [ ] レスポンシブデザインが考慮されているか
- [ ] アクセシビリティが考慮されているか

### 5. テスト

#### テストカバレッジ
- [ ] 主要な機能にテストが書かれているか
- [ ] エッジケースがテストされているか
- [ ] テストが適切に分離されているか
- [ ] テストの命名が分かりやすいか

#### テスト品質
- [ ] テストが実装詳細ではなく動作をテストしているか
- [ ] モックが適切に使用されているか
- [ ] 非同期処理のテストが正しく実装されているか

### 6. セキュリティ

#### データ保護
- [ ] 機密情報がハードコーディングされていないか
- [ ] 入力値の検証が適切に行われているか
- [ ] SQLインジェクションやXSSの対策がされているか
- [ ] 認証・認可が適切に実装されているか

### 7. パフォーマンス

#### 最適化
- [ ] 不要なライブラリのインポートがないか
- [ ] バンドルサイズへの影響が考慮されているか
- [ ] 画像の最適化がされているか
- [ ] 遅延読み込みが適切に実装されているか

## レビューコメントの例

### 良いコメント例

#### 改善提案型
```
このロジックは複雑になっているので、以下のように分割することを提案します：

\`\`\`typescript
// 提案するコード例
const validateUserInput = (input: string) => {
  // バリデーションロジック
};
\`\`\`

これにより可読性と再利用性が向上します。
```

#### 質問型
```
この実装についてですが、パフォーマンスの観点から `useMemo` を使用することは検討されましたか？
大量のデータを扱う際に再計算のコストが気になります。
```

#### 学習促進型
```
この部分は動作しますが、TypeScriptの型安全性を活かすために以下のような実装はいかがでしょうか？

参考：[TypeScript Handbook](https://www.typescriptlang.org/docs/)
```

### 避けるべきコメント例

#### 否定的・感情的
```
❌ このコードはひどいです
❌ なぜこんな書き方をするのですか？
❌ 明らかに間違っています
```

#### 具体性がない
```
❌ ここを修正してください
❌ 良くないです
❌ 問題があります
```

## レビュー時の優先度

### High（必須修正）
- セキュリティの脆弱性
- 機能的なバグ
- パフォーマンスの重大な問題
- TypeScriptエラー

### Medium（推奨修正）
- コードの可読性の問題
- 軽微なパフォーマンス問題
- スタイルガイドの違反
- テストの不足

### Low（任意修正）
- 命名の改善提案
- コメントの追加
- リファクタリングの提案

## プルリクエストのテンプレート

```markdown
## 概要
<!-- 変更内容の概要を記述 -->

## 変更内容
<!-- 具体的な変更内容をチェックリスト形式で記述 -->
- [ ] 機能A の実装
- [ ] バグB の修正
- [ ] テストC の追加

## テスト
<!-- テスト内容と結果 -->
- [ ] 単体テストの実行
- [ ] 統合テストの実行
- [ ] 手動テストの実行

## スクリーンショット
<!-- UI変更がある場合のスクリーンショット -->

## 影響範囲
<!-- 変更による影響範囲の説明 -->

## その他
<!-- 追加情報やレビューで特に注意してほしい点 -->
```

## レビューワーの責任

### 1. タイムリーなレビュー
- プルリクエスト作成から24時間以内にレビューを開始
- 緊急性の高い修正は即座に対応

### 2. 建設的なフィードバック
- 問題の指摘だけでなく、解決策も提示
- 学習を促進するような説明を含める

### 3. 一貫した基準
- プロジェクトの規約に基づいた一貫したレビュー
- 個人的な好みではなく、客観的な基準でレビュー

## 作成者の責任

### 1. セルフレビュー
- プルリクエスト作成前に自分でコードをレビュー
- 明らかなミスやスタイル違反を事前に修正

### 2. 適切な説明
- プルリクエストの説明を詳細に記述
- 変更理由や影響範囲を明確に説明

### 3. フィードバックへの対応
- レビューコメントに対して適切に対応
- 対応できない場合は理由を説明

## レビュー後のフォロー

### 1. 修正の確認
- フィードバックに基づいた修正が適切に行われているか確認
- 新たな問題が発生していないか確認

### 2. 学習の共有
- レビューで得られた知識をチーム内で共有
- 同様の問題を防ぐための対策を検討

## ツールの活用

### 1. 自動化ツール
- Biome（linting・formatting）
- TypeScript（型チェック）
- Vitest（テスト実行）
- Playwright（E2Eテスト）

### 2. GitHub機能
- プルリクエストテンプレート
- ブランチ保護ルール（以下の条件をクリアしない限りマージ不可）
  - レビュー承認
  - CI/CDパスing
  - ブランチの最新化

## レビューの改善

### 1. 定期的な振り返り
- レビュープロセスの効果を定期的に評価
- チーム内でのレビュー品質の向上

### 2. ガイドラインの更新
- プロジェクトの成長に合わせてガイドラインを更新
- 新しいベストプラクティスの導入

## 参考資料

- [GitHub Pull Request Best Practices](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests)
- [Google Code Review Guidelines](https://google.github.io/eng-practices/review/)
- [Best Practices for Code Review](https://smartbear.com/learn/code-review/best-practices-for-peer-code-review/)