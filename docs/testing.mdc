---
description: Vitestを使用したテスト戦略とベストプラクティス
globs: 
alwaysApply: false
---

# Vitest テストガイドライン

## 概要

このプロジェクトでは**Vitest**をメインテストランナーとして使用し、React Testing Libraryと組み合わせてコンポーネントテストを実装します。また、E2EテストにはPlaywrightを使用します。

## テスト環境

### 技術スタック
- **Vitest**: 高速なテストランナー（Jest互換）
- **React Testing Library**: Reactコンポーネントテスト
- **@testing-library/jest-dom**: DOM要素用カスタムマッチャー
- **JSDOM**: ブラウザ環境のシミュレーション
- **Playwright**: E2Eテスト
- **MSW** (必要に応じて): APIモック

### 設定ファイル
- vitestの設定: vitest.config.ts
- テストの共通設定: test/setup.ts

## テスト実行コマンド

```bash
# 単発実行
npm run test

# ウォッチモード
npm run test:watch

# UIモード（Vitest UI）
npm run test:ui

# カバレッジ付き実行
npm run test:coverage

# 型チェック
npm run typecheck
```

## ディレクトリ構造

```
src/
├── components/
│   └── ui/
│       ├── button.tsx
│       └── button.test.tsx             # co-locationでテストを配置
└── app/
    ├── page.tsx
    ├── page.test.tsx                   # co-locationでテストを配置
    ├── (authenticated)/
    │   └── dashboard/
    │       ├── page.tsx
    │       └── page.test.tsx           # co-locationでテストを配置
    └── signup/
        ├── page.tsx
        └── page.test.tsx               # co-locationでテストを配置
test/                                   # テスト設定・ユーティリティ
├── setup.ts                            # テスト環境セットアップ
└── utils/                              # テストユーティリティ
```

## テストの種類

### 1. ユニットテスト
個別のコンポーネントや関数をテスト

### 2. 統合テスト
複数のコンポーネントの相互作用をテスト

### 3. E2Eテスト
実際のブラウザ環境でのエンドツーエンドテスト（Playwright）

## コンポーネントテストの基本パターン

### 基本的なテスト構造

```typescript
import { render, screen } from "@testing-library/react";
import { describe, expect, it, vi } from "vitest";
import { ComponentName } from "../ComponentName";

describe("ComponentName", () => {
	it("正常に表示される", () => {
		render(<ComponentName />);
		
		expect(screen.getByText("期待するテキスト")).toBeInTheDocument();
	});
});
```

### 認証が必要なコンポーネントのテスト

```typescript
import { render, screen } from "@testing-library/react";
import type { Session } from "next-auth";
import { describe, expect, it, vi } from "vitest";
import { UserAvatar } from "../auth/user-avatar";

// next-authのuseSessionをモック
vi.mock("next-auth/react", () => ({
	useSession: vi.fn(),
}));

describe("UserAvatar", () => {
	it("認証されている場合ユーザー情報を表示", async () => {
		const { useSession } = await import("next-auth/react");
		vi.mocked(useSession).mockReturnValue({
			data: {
				user: {
					name: "テストユーザー",
					email: "test@example.com",
				},
			} as Session,
			status: "authenticated",
			update: vi.fn(),
		});

		render(<UserAvatar />);

		expect(screen.getByText("テストユーザー")).toBeInTheDocument();
		expect(screen.getByText("test@example.com")).toBeInTheDocument();
	});

	it("認証されていない場合ログインボタンを表示", async () => {
		const { useSession } = await import("next-auth/react");
		vi.mocked(useSession).mockReturnValue({
			data: null,
			status: "unauthenticated",
			update: vi.fn(),
		});

		render(<UserAvatar />);

		expect(screen.getByText("ログイン")).toBeInTheDocument();
	});
});
```

### イベントハンドリングのテスト

```typescript
import { render, screen } from "@testing-library/react";
import userEvent from "@testing-library/user-event";
import { describe, expect, it, vi } from "vitest";

describe("Button Component", () => {
	it("クリックイベントが正常に動作する", async () => {
		const user = userEvent.setup();
		const handleClick = vi.fn();

		render(<Button onClick={handleClick}>クリック</Button>);

		await user.click(screen.getByRole("button", { name: "クリック" }));

		expect(handleClick).toHaveBeenCalledTimes(1);
	});
});
```

### フォームのテスト

```typescript
import { render, screen } from "@testing-library/react";
import userEvent from "@testing-library/user-event";
import { describe, expect, it, vi } from "vitest";

describe("LoginForm", () => {
	it("フォーム送信が正常に動作する", async () => {
		const user = userEvent.setup();
		const handleSubmit = vi.fn();

		render(<LoginForm onSubmit={handleSubmit} />);

		await user.type(screen.getByLabelText("メールアドレス"), "test@example.com");
		await user.type(screen.getByLabelText("パスワード"), "password123");
		await user.click(screen.getByRole("button", { name: "ログイン" }));

		expect(handleSubmit).toHaveBeenCalledWith({
			email: "test@example.com",
			password: "password123",
		});
	});

	it("バリデーションエラーが表示される", async () => {
		const user = userEvent.setup();

		render(<LoginForm onSubmit={vi.fn()} />);

		await user.click(screen.getByRole("button", { name: "ログイン" }));

		expect(screen.getByText("メールアドレスは必須です")).toBeInTheDocument();
	});
});
```

## モック戦略

### 外部依存関係のモック

```typescript
// Next.js モック
vi.mock("next/navigation", () => ({
	useRouter: () => ({
		push: vi.fn(),
		replace: vi.fn(),
		back: vi.fn(),
	}),
	usePathname: () => "/test-path",
}));

// next-auth モック
vi.mock("next-auth/react", () => ({
	useSession: vi.fn(),
	signIn: vi.fn(),
	signOut: vi.fn(),
}));

// API呼び出しのモック
vi.mock("@/lib/api", () => ({
	fetchUsers: vi.fn(),
	createUser: vi.fn(),
}));
```

### コンポーネントのモック

```typescript
// 重いコンポーネントのモック
vi.mock("../expensive-component", () => ({
	ExpensiveComponent: () => <div data-testid="expensive-component">モック</div>,
}));

// 外部ライブラリのモック
vi.mock("recharts", () => ({
	BarChart: ({ children }: { children: React.ReactNode }) => (
		<div data-testid="bar-chart">{children}</div>
	),
	Bar: () => <div data-testid="bar" />,
	XAxis: () => <div data-testid="x-axis" />,
	YAxis: () => <div data-testid="y-axis" />,
}));
```

## カスタムレンダー関数

```typescript
// test/utils/render.tsx
import { QueryClient, QueryProvider } from "@tanstack/react-query";
import { render, type RenderOptions } from "@testing-library/react";
import type { ReactElement } from "react";

interface CustomRenderOptions extends Omit<RenderOptions, "wrapper"> {
	queryClient?: QueryClient;
}

export function renderWithProviders(
	ui: ReactElement,
	options: CustomRenderOptions = {},
) {
	const { queryClient = new QueryClient(), ...renderOptions } = options;

	function Wrapper({ children }: { children: React.ReactNode }) {
		return <QueryProvider client={queryClient}>{children}</QueryProvider>;
	}

	return render(ui, { wrapper: Wrapper, ...renderOptions });
}
```

## ベストプラクティス

### 1. Co-locationによるテスト配置
- テストファイルはテスト対象のコンポーネント・ページと同じディレクトリに配置
- `__tests__`フォルダは使用せず、ファイル単位でco-locationを実装
- テストファイル名は`[component-name].test.tsx`の形式

```
src/components/auth/
├── user-avatar.tsx          # コンポーネント本体
└── user-avatar.test.tsx     # co-locationでテストを配置
```

### 2. テストケースの命名
- 「Aの場合、Bすること」の形式で記述
- 「正常」「正しい」という単語は使わず、どういう状態が正しいのかを簡潔に記述
- 日本語で分かりやすく

```typescript
describe("UserList", () => {
	it("ユーザーが存在しない場合、空のメッセージを表示すること", () => {
		// テスト実装
	});

	it("ユーザーをクリックした場合、詳細ページに遷移すること", () => {
		// テスト実装
	});
});
```

### 3. テストの独立性
- 各テストは他のテストに依存しない
- `beforeEach`で状態をリセット

```typescript
describe("Component", () => {
	beforeEach(() => {
		vi.clearAllMocks();
	});
});
```

### 4. ユーザー中心のテスト
- 実装詳細ではなく、ユーザーの行動に焦点を当てる
- `getByRole`, `getByText`を優先的に使用

```typescript
// 良い例
expect(screen.getByRole("button", { name: "送信" })).toBeInTheDocument();

// 避けるべき例
expect(screen.getByTestId("submit-button")).toBeInTheDocument();
```

### 5. 非同期処理のテスト

```typescript
it("データが読み込まれた後、リストが表示される", async () => {
	render(<UserList />);

	// ローディング状態の確認
	expect(screen.getByText("読み込み中...")).toBeInTheDocument();

	// データ読み込み完了まで待機
	await waitFor(() => {
		expect(screen.getByText("ユーザー一覧")).toBeInTheDocument();
	});
});
```

### 6. エラーハンドリングのテスト

```typescript
it("APIエラー時、エラーメッセージが表示される", async () => {
	// APIモックでエラーを発生させる
	vi.mocked(fetchUsers).mockRejectedValue(new Error("API Error"));

	render(<UserList />);

	await waitFor(() => {
		expect(screen.getByText("データの取得に失敗しました")).toBeInTheDocument();
	});
});
```

## パフォーマンス考慮事項

### 1. テストの並列実行
Vitestはデフォルトで並列実行をサポート

### 2. モックの適切な使用
- 外部依存を最小限に抑制
- 重いコンポーネントはモック化

### 3. テストファイルの分割
- 大きなテストファイルは機能別に分割
- 共通のテストユーティリティを作成


## 参考資料

- [Vitest公式ドキュメント](mdc:https:/vitest.dev)
- [React Testing Library公式ドキュメント](mdc:https:/testing-library.com/docs/react-testing-library/intro)
- [Testing Library Best Practices](mdc:https:/kentcdodds.com/blog/common-mistakes-with-react-testing-library)
- [Playwright公式ドキュメント](mdc:https:/playwright.dev)